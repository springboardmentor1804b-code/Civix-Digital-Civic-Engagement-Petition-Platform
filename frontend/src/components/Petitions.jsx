import React, { useMemo, useState, useEffect } from "react";
import { useAuth } from "../context/AuthContext";
import { toast } from "react-toastify";
import api from "../Utils/api";
import { useNavigate, Link } from "react-router-dom";

const Petitions = () => {
Â  const { user, loading: authLoading } = useAuth();
Â  const navigate = useNavigate();
Â  const [petitions, setPetitions] = useState([]);
Â  const [loading, setLoading] = useState(true);

Â  // Filter State
Â  const [activeTag, setActiveTag] = useState("All");
Â  const [selectedLocation, setSelectedLocation] = useState("All Locations");
Â  const [selectedCategory, setSelectedCategory] = useState("All Categories");
Â  const [selectedStatus, setSelectedStatus] = useState("All");

Â  useEffect(() => {
Â  Â  const fetchPetitions = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  let endpoint = "/petitions";

Â  Â  Â  Â  // Conditional Fetching for Trending
Â  Â  Â  Â  if (activeTag === "Trending") {
Â  Â  Â  Â  Â  Â  endpoint = "/petitions/trending";
Â  Â  Â  Â  }
Â  Â  Â  Â Â 
Â  Â  Â  Â  const res = await api.get(endpoint);
Â  Â  Â  Â  setPetitions(res.data);
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  toast.error("Failed to fetch petitions.");
Â  Â  Â  Â  setPetitions([]);
Â  Â  Â  } finally {
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  }
Â  Â  };

Â  Â  if (!authLoading) {
Â  Â  Â  fetchPetitions();
Â  Â  }
Â  }, [authLoading, activeTag]);

Â  const locations = useMemo(() => {
Â  Â  if (!petitions) return ["All Locations"];
Â  Â  const uniq = Array.from(new Set(petitions.map((p) => p.location)));
Â  Â  return ["All Locations", ...uniq];
Â  }, [petitions]);

Â  const categories = useMemo(() => {
Â  Â  if (!petitions) return ["All Categories"];
Â  Â  const uniq = Array.from(new Set(petitions.map((p) => p.category)));
Â  Â  return ["All Categories", ...uniq];
Â  }, [petitions]);

Â  const statuses = ["All", "Active", "Under Review", "Closed"];

Â  const filteredPetitions = useMemo(() => {
Â  Â  if (!user || !petitions) return [];
Â  Â  const currentUserId = String(user.id || user._id || "");
Â  Â  
Â  Â  return petitions.filter((p) => {
Â  Â  Â  // Location Filter
Â  Â  Â  if (
Â  Â  Â  Â  selectedLocation !== "All Locations" &&
Â  Â  Â  Â  p.location !== selectedLocation
Â  Â  Â  )
Â  Â  Â  Â  return false;
Â  Â  Â  // Category Filter
Â  Â  Â  if (
Â  Â  Â  Â  selectedCategory !== "All Categories" &&
Â  Â  Â  Â  p.category !== selectedCategory
Â  Â  Â  )
Â  Â  Â  Â  return false;
Â  Â  Â  // Status Filter
Â  Â  Â  if (selectedStatus !== "All" && p.status !== selectedStatus) return false;
Â  Â  Â  
Â  Â  Â  // Filtering logic based on Active Tag
Â  Â  Â  if (activeTag === "Trending") return true; 

      // My Petitions Filter
Â  Â  Â  if (
Â  Â  Â  Â  activeTag === "My Petitions" &&
Â  Â  Â  Â  String(p.owner?._id || "") !== currentUserId
Â  Â  Â  )
Â  Â  Â  Â  return false;
      
      // Signed by Me Filter (UPDATED for new schema)
Â  Â  Â  if (
Â  Â  Â  Â  activeTag === "Signed by Me" &&
Â  Â  Â  Â  !(p.signatures || []).some(sig => String(sig.user || sig) === currentUserId)
Â  Â  Â  )
Â  Â  Â  Â  return false;
Â  Â  Â  
Â  Â  Â  return true;
Â  Â  });
Â  }, [
Â  Â  petitions,
Â  Â  selectedLocation,
Â  Â  selectedCategory,
Â  Â  selectedStatus,
Â  Â  activeTag,
Â  Â  user,
Â  ]);

Â  // Skip client-side sorting if "Trending" is active
Â  const sortedPetitions = useMemo(() => {
Â  Â  if (activeTag === "Trending") {
Â  Â  Â  return filteredPetitions;
Â  Â  }
Â  Â  
Â  Â  // Existing sorting logic for All/My/Signed tabs
Â  Â  const rank = (status) => {
Â  Â  Â  if (status === "Active") return 0;
Â  Â  Â  if (status === "Under Review") return 1;
Â  Â  Â  if (status === "Closed") return 2;
Â  Â  Â  return 3;
Â  Â  };
Â  Â  const withDefault = Array.isArray(filteredPetitions)
Â  Â  Â  ? [...filteredPetitions]
Â  Â  Â  : [];
Â  Â  return withDefault.sort((a, b) => {
Â  Â  Â  const statusDiff = rank(a?.status) - rank(b?.status);
Â  Â  Â  if (statusDiff !== 0) return statusDiff;
Â  Â  Â  const aVotes = Array.isArray(a?.signatures) ? a.signatures.length : 0;
Â  Â  Â  const bVotes = Array.isArray(b?.signatures) ? b.signatures.length : 0;
Â  Â  Â  return bVotes - aVotes;
Â  Â  });
Â  }, [filteredPetitions, activeTag]);

Â  const handleSign = async (petitionId) => {
Â  Â  try {
Â  Â  Â  const res = await api.post(`/petitions/${petitionId}/sign`);
Â  Â  Â  setPetitions((prev) =>
Â  Â  Â  Â  prev.map((p) => (p._id === petitionId ? res.data : p))
Â  Â  Â  );
Â  Â  Â  toast.success("Petition signed successfully!");
Â  Â  } catch (err) {
Â  Â  Â  toast.error(err.response?.data?.message || "Failed to sign petition.");
Â  Â  }
Â  };

Â  function clearFilters() {
Â  Â  setActiveTag("All");
Â  Â  setSelectedLocation("All Locations");
Â  Â  setSelectedCategory("All Categories");
Â  Â  setSelectedStatus("All");
Â  }

Â  function circleProgressProps(percent, radius = 22) {
Â  Â  const circumference = 2 * Math.PI * radius;
Â  Â  const dashoffset =
Â  Â  Â  circumference * (1 - Math.max(0, Math.min(100, percent) / 100));
Â  Â  return { circumference, dashoffset, radius };
Â  }

Â  if (authLoading || loading) {
Â  Â  return <div className="p-6 text-center">Loading petitions...</div>;
Â  }

Â  return (
Â  Â  <div className="p-6 max-w-7xl mx-auto">
Â  Â  Â  <div className="flex flex-col md:flex-row justify-between md:items-center mb-6 gap-4">
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <h1 className="text-3xl font-bold text-[#2D3E50]">Petitions</h1>
Â  Â  Â  Â  Â  <p className="text-gray-600">
Â  Â  Â  Â  Â  Â  Explore, support, and track petitions shaping your community.
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  onClick={() => navigate("/petitions/create")}
Â  Â  Â  Â  Â  className="px-4 py-2 bg-[#E84C3D] text-white font-semibold rounded-lg hover:bg-red-600 transition"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Create New Petition
Â  Â  Â  Â  </button>
Â  Â  Â  </div>

Â  Â  Â  <div className="mb-6 bg-white p-4 rounded-lg shadow">
Â  Â  Â  Â  <div className="flex flex-wrap gap-3 mb-4">
Â  Â  Â  Â  Â  {/* ADDED "Trending" tab */}
Â  Â  Â  Â  Â  {["All", "Trending", "My Petitions", "Signed by Me"].map((tag) => (
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  key={tag}
Â  Â  Â  Â  Â  Â  Â  onClick={() => setActiveTag(tag)}
Â  Â  Â  Â  Â  Â  Â  className={`px-4 py-2 rounded-full text-sm font-medium transition ${
Â  Â  Â  Â  Â  Â  Â  Â  activeTag === tag
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? "bg-[#E84C3D] text-white shadow"
Â  Â  Â  Â  Â  Â  Â  Â  Â  : "bg-gray-100 text-[#2D3E50] hover:bg-[#E84C3D] hover:text-white"
Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  {tag}
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-4 gap-4 items-center">
Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  value={selectedLocation}
Â  Â  Â  Â  Â  Â  onChange={(e) => setSelectedLocation(e.target.value)}
Â  Â  Â  Â  Â  Â  className="w-full border border-gray-300 rounded-lg p-2"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {locations.map((loc) => (
Â  Â  Â  Â  Â  Â  Â  <option key={loc} value={loc}>
Â  Â  Â  Â  Â  Â  Â  Â  {loc}
Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  value={selectedCategory}
Â  Â  Â  Â  Â  Â  onChange={(e) => setSelectedCategory(e.target.value)}
Â  Â  Â  Â  Â  Â  className="w-full border border-gray-300 rounded-lg p-2"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {categories.map((cat) => (
Â  Â  Â  Â  Â  Â  Â  <option key={cat} value={cat}>
Â  Â  Â  Â  Â  Â  Â  Â  {cat}
Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  value={selectedStatus}
Â  Â  Â  Â  Â  Â  onChange={(e) => setSelectedStatus(e.target.value)}
Â  Â  Â  Â  Â  Â  className="w-full border border-gray-300 rounded-lg p-2"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {statuses.map((s) => (
Â  Â  Â  Â  Â  Â  Â  <option key={s} value={s}>
Â  Â  Â  Â  Â  Â  Â  Â  {s}
Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={clearFilters}
Â  Â  Â  Â  Â  Â  className="px-4 py-2 text-sm rounded-lg bg-gray-200 text-[#2D3E50] hover:bg-gray-300 transition"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Clear Filters
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  <div className="mb-4 text-sm text-gray-600">
Â  Â  Â  Â  Showing{" "}
Â  Â  Â  Â  <strong className="text-[#2D3E50]">{filteredPetitions.length}</strong>{" "}
Â  Â  Â  Â  petition(s)
Â  Â  Â  </div>

Â  Â  Â  <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-8">
Â  Â  Â  Â  {sortedPetitions.length > 0 ? (
Â  Â  Â  Â  Â  sortedPetitions.map((petition) => {
Â  Â  Â  Â  Â  Â  const percent = petition.goal
Â  Â  Â  Â  Â  Â  Â  ? Math.round((petition.signatures.length / petition.goal) * 100)
Â  Â  Â  Â  Â  Â  Â  : 0;
Â  Â  Â  Â  Â  Â  const { circumference, dashoffset, radius } =
Â  Â  Â  Â  Â  Â  Â  circleProgressProps(percent);
Â  Â  Â  Â  Â  Â  const currentUserId = String(user?.id || user?._id || "");
Â  Â  Â  Â  Â  Â  
            // UPDATED HAS SIGNED CHECK
Â  Â  Â  Â  Â  Â  const hasSigned =
Â  Â  Â  Â  Â  Â  Â  user && (petition.signatures || []).some(sig => String(sig.user || sig) === currentUserId);
              
Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  <article
Â  Â  Â  Â  Â  Â  Â  Â  key={petition._id}
Â  Â  Â  Â  Â  Â  Â  Â  className="relative bg-white/70 backdrop-blur-sm border border-gray-200 rounded-2xl p-5 hover:-translate-y-2 transform transition-all shadow-md hover:shadow-2xl flex flex-col"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  {/* Trending Badge */}
Â  Â  Â  Â  Â  Â  Â  Â  {activeTag === "Trending" && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="absolute top-0 right-0 mt-3 mr-3 px-3 py-1 text-xs font-bold text-white bg-orange-500 rounded-full shadow-lg z-10">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ðŸ”¥ TRENDING
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center mb-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-xs font-semibold text-[#E84C3D] uppercase">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {petition.category}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-xs text-gray-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {new Date(petition.createdAt).toLocaleDateString()}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-lg font-semibold text-[#2D3E50] mb-2 line-clamp-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {petition.title}
Â  Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-600 mb-4 line-clamp-3 flex-grow">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {petition.description}
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative w-12 h-12">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <svg
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  width="48"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  height="48"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  viewBox="0 0 48 48"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="-rotate-90"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <circle
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  cx="24"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  cy="24"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  r={radius}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  stroke="#e6e6e6"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  strokeWidth="4"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fill="none"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <circle
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  cx="24"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  cy="24"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  r={radius}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  stroke="#E84C3D"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  strokeWidth="4"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fill="none"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  strokeDasharray={circumference}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  strokeDashoffset={dashoffset}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  strokeLinecap="round"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="absolute inset-0 flex items-center justify-center text-xs font-medium text-[#2D3E50]">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {petition.signatures.length}/{petition.goal}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-xs text-gray-500">Signatures</div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-sm font-medium text-[#2D3E50]">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {percent}%
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-right">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`px-3 py-1 rounded-full text-xs font-semibold ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  petition.status === "Active"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? "bg-green-100 text-green-700"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : "bg-gray-100 text-gray-700"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {petition.status}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-xs text-gray-500 mt-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {petition.location}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between gap-3 mt-auto">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Link
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  to={`/petitions/${petition._id}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-3 py-1 text-sm border border-[#2D3E50] text-[#2D3E50] rounded-lg hover:bg-[#2D3E50] hover:text-white transition w-full text-center"
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  View
Â  Â  Â  Â  Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleSign(petition._id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`px-3 py-1 text-sm text-white rounded-lg transition w-full ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  hasSigned || petition.status !== "Active"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? "bg-gray-400 cursor-not-allowed"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : "bg-[#E84C3D] hover:opacity-90"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={hasSigned || petition.status !== "Active"}
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {hasSigned ? "Signed" : "Sign"}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </article>
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  })
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <div className="col-span-full bg-white border border-gray-200 rounded-lg p-6 text-center text-gray-600">
Â  Â  Â  Â  Â  Â  No petitions found with the selected filters.
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}
Â  Â  Â  </div>
Â  Â  Â  </div>
Â  );
};

export default Petitions;